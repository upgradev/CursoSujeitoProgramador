////iniciar 
yarn init -y

//// express
yarn add express

// query params = ?nome=Nodejs

// route params = /curso/2

// request body (corpo da requisicao) = {nome: "curso node", tipo: "back end"}

/// nodemon para live reload 
yarn add nodemon -D
package.json
"scripts": {
    "dev" : "nodemon index.js"
  },

//// sintaxe de import export
yarn add sucrase -D

criar o arquivo na raiz nodemon.json
{
    "execMap": {
        "js": "node -r sucrase/register"
    }
}
e no package.json
"scripts": {
    "dev" : "nodemon src/server.js"
  },

//// banco de dados mongo
yarn add mongoose

//// multipartforma enviar arquivos e imagens
yarn add multer

//// cors para limitar o acesso a api
yarn add cors

//// trabalhar com verificações dos campos, validações
https://github.com/jquense/yup
yarn add yup

///// padrão de codigo / projeto
yarn add eslint -D
rodar : yarn eslint --init
yarn add prettier eslint-config-prettier eslint-plugin-prettier -D
arrumar os arquivos: yarn eslint --fix src --ext .js


//// sequelize trabalhar com ORM / banco de dados relacional
https://sequelize.org/master/manual/getting-started.html
yarn add sequelize
yarn add sequelize-cli -D
criar o arquivo .sequelizerc
yarn add pg pg-hstore

//// gerar as migrations
yarn sequelize migration:create --name=create-users
criar os campos no arquivo das migrations
yarn sequelize db:migrate
desfazer a tabela: yarn sequelize db:migrate:undo
desfazer todas as migrations: yarn sequelize db:migrate:undo:all

//// senha hash
yarn add bcryptjs

//// jwt
yarn add jsonwebtoken